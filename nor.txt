1. Line_Equation
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int x1, y1, x2, y2, x, y, c = WHITE;

    cout << "Enter starting coordinates (x1, y1): ";
    cin >> x1 >> y1;
    cout << "Enter ending coordinates (x2, y2): ";
    cin >> x2 >> y2;

    int h = getmaxy();
    float m= float(y2-y1) / float(x2-x1);
    float b = y1 - (m * x1);
    x = x1;
    y = y1;

    for(x=x1; x<=x2; x++)
    {
        y = int(m*x) + b;
        putpixel(x, h-y, c);
        delay(20);
    }

    getch();
    closegraph();

    return 0;
}

1. Line_Equation_(dashed)
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int x1, y1, x2, y2, x, y, c = 15, cnt = 0;

    cout << "Enter starting coordinates (x1, y1): ";
    cin >> x1 >> y1;
    cout << "Enter ending coordinates (x2, y2): ";
    cin >> x2 >> y2;

    int h = getmaxy();
    float m= float(y2-y1) / float(x2-x1);
    float b = y1 - (m * x1);
    x = x1;
    y = y1;

    for(x=x1; x<=x2; x++)
    {
        y = int(m*x) + b;
        putpixel(x, h-y, c);
        delay(20);
        cnt++;
        if(cnt == 3)
        {
            x += 2;
            cnt = 0;
        }
    }

    getch();
    closegraph();

    return 0;
}

2. Line_DDA
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int x1, y1, x2, y2, x, y, c = 15;

    cout << "Enter starting coordinates (x1, y1): ";
    cin >> x1 >> y1;
    cout << "Enter ending coordinates (x2, y2): ";
    cin >> x2 >> y2;

    int h = getmaxy();
    float m= float(y2-y1) / float(x2-x1);
    x = x1;
    y = y1;

    if(m <= 1)
    {
        int step = x2 - x1;
        float y_fl = y;
        for(int k=0; k<=step; k++)
        {
            putpixel(x, h-y, c);
            x++;
            y_fl = y_fl + m;
            y = y_fl;
            delay(20);
        }
    }
    else
    {
        float invSlope = 1 / m;
        int step = y2 - y1;
        float x_fl = x;
        for(int k=0; k<=step; k++)
        {
            putpixel(x, h-y, c);
            y++;
            x_fl = x_fl + invSlope;
            x = x_fl;
            delay(20);
        }
    }

    getch();
    closegraph();

    return 0;
}

3. Line_Bresenham
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int x1, y1, x2, y2, x, y, c = 15, d, dx, dy;

    cout << "Enter starting coordinates (x1, y1): ";
    cin >> x1 >> y1;
    cout << "Enter ending coordinates (x2, y2): ";
    cin >> x2 >> y2;

    int h = getmaxy();
    x = x1;
    y = y1;

    dx = x2 - x1;
    dy = y2 - y1;

    d = (2*dy) - dx;

    while(x <= x2)
    {
        putpixel(x, h-y, c);
        delay(20);

        x++;
        if(d < 0)
        {
            d = d + (2*dy);
        }
        else
        {
            y++;
            d = d + (2*(dy - dx));
        }
    }

    getch();
    closegraph();

    return 0;
}

4. Circle_Equation
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

void circle_sym(int x, int y, int h, int k, int c)
{
    putpixel(h+x, k+y, c);
    putpixel(h+y, k+x, c);
    putpixel(h-y, k+x, c);
    putpixel(h-x, k+y, c);
    putpixel(h-x, k-y, c);
    putpixel(h-y, k-x, c);
    putpixel(h+y, k-x, c);
    putpixel(h+x, k-y, c);
}

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int r, x, y, h, k, OA;

    cout << "Enter the co-ordinate of Circle's Center (h,k): ";
    cin >> h >> k;

    cout << "Enter the radius: ";
    cin >> r;

    OA = r / sqrt(2);

    for(x=0; x<=OA; x++)
    {
        y = sqrt(r*r - x*x);

        circle_sym(x, y, h, k, 12);
        delay(20);
    }

    getch();
    closegraph();

    return 0;
}

5. Circle_Mid_Point
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

void circle_sym(int x, int y, int h, int k, int c)
{
    putpixel(h+x, k+y, c);
    putpixel(h+y, k+x, c);
    putpixel(h-y, k+x, c);
    putpixel(h-x, k+y, c);
    putpixel(h-x, k-y, c);
    putpixel(h-y, k-x, c);
    putpixel(h+y, k-x, c);
    putpixel(h+x, k-y, c);
}

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int r, x, y, h, k, p;

    cout << "Enter the co-ordinate of Circle's Center (h,k): ";
    cin >> h >> k;

    cout << "Enter the radius: ";
    cin >> r;

    x = 0;
    y = r;
    p = 1 - r;

    while(x <= y)
    {
        circle_sym(x, y, h, k, 12);
        delay(20);

        if(p < 0)
        {
            p = p + (2*x) + 3;
        }
        else
        {
            p = p + (2*(x-y)) + 5;
            y--;
        }
        x++;
    }

    getch();
    closegraph();

    return 0;
}

6. Circle_Bresenham
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

void circle_sym(int x, int y, int h, int k, int c)
{
    putpixel(h+x, k+y, c);
    putpixel(h+y, k+x, c);
    putpixel(h-y, k+x, c);
    putpixel(h-x, k+y, c);
    putpixel(h-x, k-y, c);
    putpixel(h-y, k-x, c);
    putpixel(h+y, k-x, c);
    putpixel(h+x, k-y, c);
}

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int r, x, y, h, k, d;

    cout << "Enter the co-ordinate of Circle's Center (h,k): ";
    cin >> h >> k;

    cout << "Enter the radius: ";
    cin >> r;

    x = 0;
    y = r;
    d = 3 - r;

    while(x <= y)
    {
        circle_sym(x, y, h, k, 12);
        delay(20);

        if(d < 0)
        {
            d = d + (4*x) + 6;
        }
        else
        {
            d = d + (4*(x-y)) + 10;
            y--;
        }
        x++;
    }

    getch();
    closegraph();

    return 0;
}

7. Rotation_Circle
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

int main()
{
    int r, x, y, h, k;
    float pi = 3.1416, theta, th = 0, d_th = pi / 180;
    cout << "Enter the co-ordinate of Circle's Center (h,k): ";
    cin >> h >> k;

    cout << "Enter the radius: ";
    cin >> r;

    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int height = getmaxy();
    circle(h, height-k, r);

    cout << "Enter the rotation angle (theta): ";
    cin >> theta;

    theta = theta * (pi / 180);
    x = h;
    y = k;

    while(th <= theta)
    {
        cleardevice();
        circle(x, height-y, r);
        circle(h, height-k, r);
        line(x, height-y, 0, height);
        line(h, height-k, 0, height);
        delay(100);

        th = th + d_th;
        x = h*cos(th) - k*sin(th);
        y = h*sin(th) + k*cos(th);
    }

    getch();
    closegraph();

    return 0;
}

8. Translation_Circle
#include<bits/stdc++.h>
#include<graphics.h>
using namespace std;

void translate_circle(int h, int k, int x, int y, int r)
{
    int height = getmaxy();

    cleardevice();
    circle(x, height-y, r);
    circle(h, height-k, r);
    line(x, height-y, h, height-k);
    delay(20);
}

int main()
{
    int h, k, x, y, r, tx, ty;
    cout << "Enter the Coordinates of the Circle's Center (h,k): ";
    cin >> h >> k;
    cout << "Enter the radius of the Circle: ";
    cin >> r;

    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int height = getmaxy();

    circle(h, height-k, r);

    cout << "Enter Translation Value of the Circle (tx,ty): ";
    cin >> tx >> ty;

    x = h;
    y = k;

    for(x=h; x<=h+tx; x++)
    {
        translate_circle(h, k, x, y, r);
    }

    for(y=k; y<=k+ty; y++)
    {
        translate_circle(h, k, x, y, r);
    }

    getch();
    closegraph();

    return 0;
}

9. Translation_Triangle
#include<bits/stdc++.h>
#include<graphics.h>
using namespace std;

void triangle(int x1, int y1, int x2, int y2, int x3, int y3)
{
    int height = getmaxy();

    line(x1, height-y1, x2, height-y2);
    line(x1, height-y1, x3, height-y3);
    line(x2, height-y2, x3, height-y3);
}

void translate_tri(int x1, int y1, int x2, int y2, int x3, int y3, int x1_, int y1_, int x2_, int y2_, int x3_, int y3_)
{
    cleardevice();
    triangle(x1_, y1_, x2_, y2_, x3_, y3_);
    triangle(x1, y1, x2, y2, x3, y3);
    delay(20);
}

int main()
{
    int x1, y1, x2, y2, x3, y3, x1_, y1_, x2_, y2_, x3_, y3_, tx, ty;
    cout << "Enter the Coordinates of the Triangle's Vertex-1 (x1,y1): ";
    cin >> x1 >> y1;
    cout << "Enter the Coordinates of the Triangle's Vertex-2 (x2,y2): ";
    cin >> x2 >> y2;
    cout << "Enter the Coordinates of the Triangle's Vertex-3 (x3,y3): ";
    cin >> x3 >> y3;

    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    triangle(x1, y1, x2, y2, x3, y3);

    cout << "Enter Translation Value of the Triangle (tx,ty): ";
    cin >> tx >> ty;

    x1_=x1, x2_=x2, x3_=x3;
    y1_=y1, y2_=y2, y3_=y3;

    for(x1_=x1, x2_=x2, x3_=x3; x1_<=x1+tx; x1_++, x2_++, x3_++)
    {
        translate_tri(x1, y1, x2, y2, x3, y3, x1_, y1_, x2_, y2_, x3_, y3_);
    }

    for(y1_=y1, y2_=y2, y3_=y3; y1_<=y1+ty; y1_++, y2_++, y3_++)
    {
        translate_tri(x1, y1, x2, y2, x3, y3, x1_, y1_, x2_, y2_, x3_, y3_);
    }

    getch();
    closegraph();

    return 0;
}


10. Rotation_Line_(Point)
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int x1, y1, x2, y2, x3, y3, x1_, y1_, x2_, y2_, x3_, y3_, a, b, x, y;
    float pi = 3.1416, th = 0, theta, d_th = pi / 180;

    cout << "Enter the Coordinates of the End-point (x1, y1): ";
    cin >> x1 >> y1;

    cout << "Enter the Coordinates of the End-point (x2, y2): ";
    cin >> x2 >> y2;

    int height = getmaxy();

    line(x1, height-y1, x2, height-y2);

    cout << "Enter the Coordinates of the point (a, b): ";
    cin >> a >> b;

    putpixel(a, height-b, 15);
    outtextxy(a+10, height-b, (char*)"P");

    cout << "Enter the rotation angle (theta): ";
    cin >> theta;

    theta = theta * pi / 180;

    x1_ = x1, x2_ = x2, x3_ = x3;
    y1_ = y1, y2_ = y2, y3_ = y3;

    while(th <= theta){

        cleardevice();

        line(x1_, height-y1_, x2_, height-y2_);
        line(x1, height-y1, x2, height-y2);

        putpixel(a, height-b, 15);
        outtextxy(a+10, height-b, (char*)"P");
        delay(20);

        th = th + d_th;

        x1_ = x1*cos(th) - y1*sin(th) - (a*cos(th) - b*sin(th) - a);
        y1_ = x1*sin(th) + y1*cos(th) - (a*sin(th) + b*cos(th) - b);

        x2_ = x2*cos(th) - y2*sin(th) - (a*cos(th) - b*sin(th) - a);
        y2_ = x2*sin(th) + y2*cos(th) - (a*sin(th) + b*cos(th) - b);
    }

    getch();
    closegraph();

    return 0;
}

10. Rotation_Triangle
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

void triangle(int x1, int y1, int x2, int y2, int x3, int y3)
{
    int height = getmaxy();

    line(x1, height-y1, x2, height-y2);
    line(x1, height-y1, x3, height-y3);
    line(x2, height-y2, x3, height-y3);
}

int main()
{
    int x1, y1, x2, y2, x3, y3, x1_, y1_, x2_, y2_, x3_, y3_, tx, ty;
    float pi = 3.1416, theta, th = 0, d_th = pi / 180;

    cout << "Enter the Coordinates of the Triangle's Vertex-1 (x1,y1): ";
    cin >> x1 >> y1;
    cout << "Enter the Coordinates of the Triangle's Vertex-2 (x2,y2): ";
    cin >> x2 >> y2;
    cout << "Enter the Coordinates of the Triangle's Vertex-3 (x3,y3): ";
    cin >> x3 >> y3;

    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    triangle(x1, y1, x2, y2, x3, y3);

    cout << "Enter the rotation angle (theta): ";
    cin >> theta;

    theta = theta * (pi / 180);
    x1_=x1, x2_=x2, x3_=x3;
    y1_=y1, y2_=y2, y3_=y3;
    int height = getmaxy();

    while(th <= theta)
    {
        cleardevice();
        triangle(x1_, y1_, x2_, y2_, x3_, y3_);
        triangle(x1, y1, x2, y2, x3, y3);
        line(x1, height-y1, 0, height);
        line(x1_, height-y1_, 0, height);
        delay(100);

        th = th + d_th;
        x1_ = x1*cos(th) - y1*sin(th);
        y1_ = x1*sin(th) + y1*cos(th);
        x2_ = x2*cos(th) - y2*sin(th);
        y2_ = x2*sin(th) + y2*cos(th);
        x3_ = x3*cos(th) - y3*sin(th);
        y3_ = x3*sin(th) + y3*cos(th);
    }

    getch();
    closegraph();

    return 0;
}

10. Rotation_Triangle_(Point)
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

void triangle(int x1, int y1, int x2, int y2, int x3, int y3){

    int height = getmaxy();

    line(x1, height-y1, x2, height-y2);
    line(x1, height-y1, x3, height-y3);
    line(x2, height-y2, x3, height-y3);
}

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int x1, y1, x2, y2, x3, y3, x1_, y1_, x2_, y2_, x3_, y3_, a, b, x, y;
    float pi = 3.1416, th = 0, theta, d_th = pi / 180;

    cout << "Enter the Coordinates of the Triangle's Vertex-1 (x1, y1): ";
    cin >> x1 >> y1;

    cout << "Enter the Coordinates of the Triangle's Vertex-2 (x2, y2): ";
    cin >> x2 >> y2;

    cout << "Enter the Coordinates of the Triangle's Vertex-3 (x3, y3): ";
    cin >> x3 >> y3;

    triangle(x1, y1, x2, y2, x3, y3);

    cout << "Enter the Coordinates of the point (a, b): ";
    cin >> a >> b;

    int height = getmaxy();

    putpixel(a, height-b, 15);
    circle(a, height-b, 4);
    outtextxy(a+10, height-b, (char*)"P");

    cout << "Enter the rotation angle (theta): ";
    cin >> theta;

    theta = theta * pi / 180;

    x1_ = x1, x2_ = x2, x3_ = x3;
    y1_ = y1, y2_ = y2, y3_ = y3;

    while(th <= theta){

        cleardevice();

        triangle(x1_, y1_, x2_, y2_, x3_, y3_);
        triangle(x1, y1, x2, y2, x3, y3);
        line(a, height-b, x1_, height-y1_);
        line(a, height-b, x1, height-y1);
        putpixel(a, height-b, 15);
        circle(a, height-b, 4);
        outtextxy(a+10, height-b, (char*)"P");
        delay(20);

        th = th + d_th;

        x1_ = x1*cos(th) - y1*sin(th) - (a*cos(th) - b*sin(th) - a);
        y1_ = x1*sin(th) + y1*cos(th) - (a*sin(th) + b*cos(th) - b);

        x2_ = x2*cos(th) - y2*sin(th) - (a*cos(th) - b*sin(th) - a);
        y2_ = x2*sin(th) + y2*cos(th) - (a*sin(th) + b*cos(th) - b);

        x3_ = x3*cos(th) - y3*sin(th) - (a*cos(th) - b*sin(th) - a);
        y3_ = x3*sin(th) + y3*cos(th) - (a*sin(th) + b*cos(th) - b);
    }

    getch();
    closegraph();

    return 0;
}

11. Flood_Fill
#include<bits/stdc++.h>
#include<graphics.h>
using namespace std;

void floodFill(int x, int y, int oldColor, int newColor)
{
    if(getpixel(x, y) == oldColor)
    {
        putpixel(x, y, newColor);
        delay(10);
        floodFill(x+1, y, oldColor, newColor);
        floodFill(x, y+1, oldColor, newColor);
        floodFill(x-1, y, oldColor, newColor);
        floodFill(x, y-1, oldColor, newColor);
        //delay(100);
    }
}

int main()
{
    int h, k, r;
    cout << "Enter the Coordinates of the Circle's Center (h,k): ";
    cin >> h >> k;
    cout << "Enter the radius of the Circle: ";
    cin >> r;

    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    circle(h, k, r);

    floodFill(h, k, BLACK, MAGENTA);

    getch();
    closegraph();

    return 0;
}

11. Span_Line_Fill
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

void spanLine(int x, int y, int c)
{
    int h = getmaxy(), w = getmaxx();

    int lx = x, ly = y, rx = x+1, ry = y;

    while(getpixel(lx, ly) != c)
    {
        putpixel(lx, ly, c);
        lx--;
    }

    while(getpixel(rx, ry) != c)
    {
        putpixel(rx, ry, c);
        rx++;
    }

    int left = lx;

    while(getpixel(left+1, ly-1) != c || getpixel(left+1, ry+1) != c)
    {
        if(getpixel(left+1, ly-1) != c)
        {
            lx = left+1;
            ly = ly-1;
            while(getpixel(lx, ly) != c)
            {
                putpixel(lx, ly, c);
                lx++;
            }
        }

        if(getpixel(left+1, ry+1) != c)
        {
            rx = left+1;
            ry = ry+1;
            while(getpixel(rx, ry) != c)
            {
                putpixel(rx, ry, c);
                rx++;
            }
        }
    }
}

int main()
{
    int x1, y1, x2, y2;
    cout << "Enter the Coordinates of the Rectangle's Top-Left(x1, y1): ";
    cin >> x1 >> y1;
    cout << "Enter the Coordinates of the Rectangle's Bottom-Right(x2, y2): ";
    cin >> x2 >> y2;

    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    int h = getmaxy();

    rectangle(x1, h-y1, x2, h-y2);

    int x = (x1 + x2) / 2;
    int y = h - (y1 + y2) / 2;

    spanLine(x+10, y+40, WHITE);

    getch();
    closegraph();

    return 0;
}

12. Weller_Atherton
#include<bits/stdc++.h>
#include<graphics.h>
using namespace std;

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    rectangle(100,100, 300,300);
    line(120,250,120,50);
    line(120,50,180,200);
    line(180,200,280,50);
    line(280,50,280,250);
    line(280,250,120,250);


    int x = 120, y = 200;

    putpixel(x, y, RED);
    outtextxy(x+10, y, (char*)"Start");
    y = y - 1;

    while(1)
    {
        putpixel(x, y, RED);
        if(getpixel(x-1,y+1) == WHITE)
        {
            x=x-1;
            y=y+1;
        }
        else if(getpixel(x,y+1) == WHITE)
        {
            y=y+1;
        }
        else if(getpixel(x+1,y+1) == WHITE)
        {
            x=x+1;
            y=y+1;
        }
        else if(getpixel(x+1,y) == WHITE)
        {
            x=x+1;
        }
        else if(getpixel(x+1,y-1) == WHITE)
        {
            x=x+1;
            y=y-1;
        }
        else if(getpixel(x,y-1) == WHITE)
        {
            y=y-1;
        }
        else if(getpixel(x,y-2) == WHITE)
        {
            y=y-2;
        }
        else if(getpixel(x-1,y-1) == WHITE)
        {
            x=x-1;
            y=y-1;
        }
        else if(getpixel(x-1,y) == WHITE)
        {
            x=x-1;
            y=y;
        }
        else if(getpixel(x-2,y) == WHITE)
        {
            x=x-2;
            y=y;
        }
        else break;
        delay(20);
    }
    outtextxy(x+10, y+30, (char*)"End");

    getch();
    closegraph();

    return 0;
}

13. Z_Buffer
#include<bits/stdc++.h>
#include<graphics.h>

using namespace std;

void triangle(int x1, int y1, int x2, int y2, int x3, int y3)
{
    line(x1, y1, x2, y2);
    line(x1, y1, x3, y3);
    line(x2, y2, x3, y3);
}

void floodFill(int x, int y, int newColor)
{
    if(getpixel(x, y) != newColor)
    {
        putpixel(x, y, newColor);
        floodFill(x+1, y, newColor);
        floodFill(x, y+1, newColor);
        floodFill(x-1, y, newColor);
        floodFill(x, y-1, newColor);
    }
}

int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char*)"");

    setcolor(GREEN);
    rectangle(180, 100, 250, 200);
    floodFill(200, 180, GREEN);

    setcolor(RED);
    circle(195, 170, 50);
    floodFill(200, 180, RED);

    setcolor(BLUE);
    triangle(180, 150, 230, 200, 200, 250);
    floodFill(200, 180, BLUE);

    getch();
    closegraph();

    return 0;
}

